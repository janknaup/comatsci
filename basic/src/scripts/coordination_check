#!/usr/bin/env python
##############################################################################
# coordination_check
# Part of COmputational MAterials SCIence toolkit - comatsci
# (c) 2005-2008 by Jan M. Knaup <janknaup@gmail.com>
# all rights reserved
##############################################################################
# Licensed under the Non-Profit Open Software License version 3.0
# see file LICENSE for details.
##############################################################################

import os,sys

versionname="python%d.%d" % sys.version_info[0:2]

#sys.path.append(os.path.join(os.path.dirname(sys.argv[0]),
#		"../lib/",versionname,"site-packages"))

from comatsci import Geometry


from optparse import OptionParser

programname=os.path.basename(sys.argv[0]).lower()

geo=Geometry.AnalysisGeometry()

# dirty trick to make optparse display an intelligible error message, if output format is not specified

usage="usage: %prog [options] <input file> [<output file>]\nLicensed under the Non-Profit Open Software License version 3.0"

parser=OptionParser(usage)

parser.add_option("-l","--layer",
		action="store", metavar="L", dest="layer", type="int", default=None,
		help="Write only atoms from layer L into output geometry. default: write whole geometry")
parser.add_option("-e","--element",
		action="store", metavar="E", dest="element", type="int", default=None,
		help="Write only atoms of lement E into output geometry. default: write all elements")
parser.add_option("-t", "--tolerance",
		action="store", metavar="T", dest="tolerance", type="float", default=1.1,
		help="Detect bonds if distance is T times the canonical bond length")


(options,args) = parser.parse_args()


if (len(args) > 2):
	print "unexpected arguments in command line : %s" % (string(args[2:]))
	print "aborting"
	sys.exit(1)

infilename=os.path.abspath(args[0])

geo.readfile(infilename)

# if a layer to add was specified, do it

if options.layer!=None:
	print "extracting layer subgeometry for layer %d:%s" % (
		options.layer,geo.LayerDict[options.layer].Name)
	outgeo=geo.layersubgeometry(options.layer)
else:
	outgeo=geo

if options.element!=None:
	print "filtering for element %d%s" % (
		options.element,geo.PTE[options.element])
	outgeo=outgeo.elementsubgeometry(options.element)
else:
	pass

if (len(args)==2):
	outfilename=os.path.abspath(args[1])
else:
	outfilename=os.path.basename(infilename)
	dotpos=outfilename.rfind('.')
	outfilename=os.path.basename(outfilename)[0:dotpos]+".pdb"
		

print "Using bond detection tolerance of %f"%options.tolerance
outgeo.writepdb(outfilename, beta=outgeo.get_atom_coordination_differences(options.tolerance), writebondlist=True)
