#!/usr/bin/env python
##############################################################################
# chargeanalys-2D
# Part of PAth Search Tool bAsed on Flexible Atomistic Reaction Image ANalysis
# (c) 2005-2008 by Jan M. Knaup <Knaup@bccms.uni-bremen.de>
# all rights reserved
##############################################################################
# Licensed under a free for non-commericial use, do not distribute basis
# see file LICENSE for details.
#############################################################################

import comatsci
import Numeric as num
import sys
import copy
import os
from optparse import OptionParser
import re

# initialize option parser

usage="usage: %prog [reference geometry]"
parser=OptionParser(usage)

# parse command line
(options,args)=parser.parse_args()
# sanity check arguments
if len(args)!=1:
  print "Must specify exactly one reference geometry file. Abort."
  sys.exit(1)

# initialize Geometry object and read reference data
print "reading reference geometry...",
sys.stdout.flush()
fullgeo=comatsci.Geometry.AnalysisGeometry()
fullgeo.readfile(args[0])
geo=fullgeo.layersubgeometry(0)
print "done."

# get list of gaussian blur widths that were caluclated
#  compile a regular expression to match against the files in cwd
detailed_out_re=re.compile("^detailed-([0-9]*\.[0-9]*)-([0-9]*\.[0-9]*)\.out")

#  construct empty lists of independent variables
xlist=[]
ylist=[]
#  iterate through directory listing and store galculated gbw-s as strings
for i in os.listdir("."):
  match=detailed_out_re.match(i)
  if match:
     if not match.group(1) in xlist:
       xlist.append(match.group(1))
     if not match.group(2) in ylist:
       ylist.append(match.group(2))
xlist.sort()
ylist.sort()


# save the reference charges
fulldftbcharges=copy.deepcopy(geo.AtomCharges)

# get the number of non-linkatoms in the geometry
linkatomslist=geo.getSubTypeAtomList("H_l")
qmatoms=geo.Atomcount-len(linkatomslist)

print "Total QM atom count: %d" % geo.Atomcount
print "Non-saturator atoms: %d" % qmatoms

RMSQ=num.zeros((len(xlist),len(ylist)),num.Float)
dQ=num.zeros((len(xlist),len(ylist)),num.Float)

fulldftbcharges=copy.deepcopy(geo.AtomCharges)

rmsfile=open("RMSQ.dat","w")
dqfile=open("dQ.dat","w")

print("Analyzing %d charge calculation results"%((len(xlist)*len(ylist)),))

progress=comatsci.utils.ProgressMeter(total=len(xlist)*len(ylist))

for i in range(len(xlist)):
  for j in range(len(ylist)):
##    print("detailed-%s-%s.out" % (xlist[i],ylist[j]))
    geo.read_noodle_charges("detailed-%s-%s.out" % (xlist[i],ylist[j]))
    hcharges=num.array(geo.AtomCharges[qmatoms:])
    dQ[i][j]=num.sum(num.array(geo.AtomCharges[:qmatoms])-num.array(fulldftbcharges[:qmatoms]))
    RMSQ[i][j]=num.sqrt(num.dot((num.array(geo.AtomCharges[:qmatoms])-num.array(fulldftbcharges[:qmatoms])),
      (num.array(geo.AtomCharges[:qmatoms])-num.array(fulldftbcharges[:qmatoms])))/float(qmatoms))
    print >> rmsfile, "%f     %f      %f" % (float(xlist[i]),float(ylist[j]),RMSQ[i][j])
    print >> dqfile,  "%f     %f      %f" % (float(xlist[i]),float(ylist[j]),dQ[i][j])
    progress.update(1)
  print >> rmsfile
  print >> dqfile

rmsfile.close()
dqfile.close()
