#!/usr/bin/python
##############################################################################
# fitrep_mopso
# Part of PAth Search Tool bAsed on Flexible Atomistic Reaction Image ANalysis
# (c) 2005-2008 by Jan M. Knaup <Knaup@bccms.uni-bremen.de>
# all rights reserved
##############################################################################
# redistribution prohibited
# see file LICENSE for details.
##############################################################################


#
# IMPORTS
#
import os,sys,shutil

versionname="python%d.%d" % sys.version_info[0:2]

sys.path.append(os.path.join(os.path.dirname(sys.argv[0]),
		"../lib/",versionname,"site-packages"))

import comatsci

import numpy.oldnumeric as num

from optparse import OptionParser

import random as rnd

import copy

import time

import popen2

#*************
#* Constants *
#*************

# Target Functions
# API convention: target functions must provide named option "opt" to pass additional options dictionary
TARGETFUNCTIONS={
	"forcesquares":			(comatsci.AnalysisPath.AnalysisPath.forceSquares,),
	"forcerms" :				(comatsci.AnalysisPath.AnalysisPath.forceRms,),
	"reactionsquares": 	(comatsci.AnalysisPath.AnalysisPath.allDeltaESquares,),
	"sqreaction":				(comatsci.AnalysisPath.AnalysisPath.sqreaction,),
}
# Options allowed for target functions
T_VALIDOPTIONS={
	"forcesquares":None,
	"forcerms":None,
	"reactionsquares":None,
	"sqreaction": ("products","educts"),
}
# Options required by target functions
T_REQUIREDOPTIONS={
	"forcesquares":None,
	"forcerms":None,
	"reactionsquares":None,
	"sqreaction": ("products","educts"),
}


#************************
#* Function Definitions *
#************************


def optImageList(arg,path,lineNumber):
	"""convert comma separated image numers counting from unity (1) to internal indices,
	check if image numbers are in range of path
	@param arg: option argument string to parse
	@param path: Path object to apply target function to
	@param lineNumber: line number in input file, in which option appears
	"""
	#iniutialize return list
	indexList=[]
	#indices must be comma-separated
	imgTokens=arg.split(",")
	#convert to integer index counting from 0 and check
	for i in imgTokens:
		#integer conversion can fail
		try:
			index=int(i)-1
		except:
			print "Invalid target function definition in line %d of targets: integer conversion error" % (lineNumber)
			raise
		#index can be out of range of images in path
		if index >=path.numImages:
			raise "Invalid target function definition in line %d of targets: image index out of range" % (lineNumber)
		indexList.append(index)
	return indexList



def readerep(filename):
	"""return E_rep array from input file
	@param filename: input file name"""
	erepfile=open(filename,'r')
	replines=list(erepfile)
	erepfile.close()
	rlist=[]
	elist=[]
	for i in replines:
		# ignore common comment markers
		firstchar=i.lstrip()[0]
		if not (firstchar=="#" or firstchar==";"):
			dummy=i.split()
			if not (dummy[0].lstrip()[0]=='*' or dummy[1].lstrip()[0]=='*'):
				rlist.append(float(dummy[0]))
				elist.append(float(dummy[1]))
	return num.array([num.array(rlist),num.array(elist)])



def read_ranges(rangesFileName,verbosity=comatsci.constants.VBL_QUIET):
	"""read and parse parameter ranges definition file
	@param rangesFileName: filename to read parameter ranges from
	@param verbosity: default=comatsci.constants.VBL_QUIET verbosity level
	"""
	ranges={}
	# read ranges file to list of lines
	rangesfile=open(rangesFileName,"r")
	lines=list(rangesfile)
	rangesfile.close()
	# iterate through ranges lines
	for i in range(len(lines)):
		#skip comments and empty lines
		if len(lines[i].strip())==0 or lines[i].strip()[0]=="#" :
			continue
		else:
			dummy=lines[i].strip().split()
			# expecting parameter number (counting from 1), lowbound, highbund
			if (len(dummy) > 3):
				raise "unexpected colunms in line %d of ranges definition file" % (i+1)
			elif (len(dummy) < 3):
					raise "missing column(s) in line %d of ranges definition file" % (i+1)
			# try converting numbers, give number of offending line, if this fails
			try:
				idx=int(dummy[0])
				lo=float(dummy[1])
				hi=float(dummy[2])
			except:
				print"Cannot parse line %d of repulsives:" % (i+1)
				raise
			# check for duplicate range definitions
			if ranges.has_key(idx):
				raise "Duplicate range definition for parameter %d in line %d of ranges definition file." % (idx,i)
			# if everything is okay, add range spec to return dictionary
			ranges[i]=(lo,hi)
	# done
	return ranges



def read_repulsives(repsFileName="repulsives",verbosity=comatsci.constants.VBL_QUIET):
	"""read and parse repulsives specification config file
	@param repsFileName: default="repulsives" filename to read repulsives definitions from
	@param verbosity: default=comatsci.constants.VBL_QUIET verbosity level"""
	# initalize repulsives dictionary
	ereps={}
	# initialize optimization parameter map
	# @optimization parameter map is stored as a list of (e1,e2,index) tuples
	paramap=[]
	# read config file lines into memory
	repulsiveConfig=open(repsFileName)
	repLines=list(repulsiveConfig)
	repulsiveConfig.close()
	# now parse each line (do not iterate over lines 
	# to have correct line-number to report to the 
	# user, in case of an error
	for i in range(len(repLines)):
		# skip comment lines
		if len(repLines[i].strip())==0 or repLines[i].strip()[0]=="#" :
			continue
		else:
			# split line into components
			dummy=repLines[i].strip().split()
			# expecting E_1 E_2 Filename inner <outer>
			if (len(dummy)==4 and int(dummy[3])!=-1):
				raise "Invalid E_rep specification in line %d of repulsives: expecting inner and outer optimization range" % (i+1)
			elif len(dummy)!=5 and len(dummy)!=4:
				raise "Invalid E_rep specification in line %d of repulsives: expecting E_1 E_2 Filename inner <outer>, inner must be -1 if E_rep is to be fixed" % (i+1)
			# Check, if Element numbers can be parsed as integers
			try:
				e1=int(dummy[0])
				e2=int(dummy[1])
			except:
				print"Invalid E_rep specification in line %d of repulsives:" % (i+1)
				raise
			# Element numbers are stored in ascending order
			if e2>=e1:
				elems=(e1,e2)
			else:
				elems=(e2,e1)
			# Check if E_rep file exists
			erepFileName=dummy[2]
			if not os.path.exists(erepFileName):
				raise "Invalid E_rep specification in line %d of repulsives: E_rep file '%s' not found." % (i+1,erepFileName)
			else:
				erep=readerep(erepFileName)
			# Elemtents and repulsive specification have been read
			# now store them for the E_rep calculator
			# (warn if overwriting previously specified E_rep)
			if ereps.has_key(elems):
				if verbosity >= comatsci.constants.VBL_QUIET:
					print "*** WARNING: double definition of E_rep for %s interation in repulsives line: %d" %(str(elems),i+1)
			ereps[elems]=erep
			# Now take care of the optimization parameter mapping
			# ( inner mutable index -1 means fixed E_rep )
			if int(dummy[3])!=-1:
				# user indices are 1... while program indices are 0...
				for param in range(int(dummy[3])-1,int(dummy[4])):
					paramap.append((elems[0],elems[1],param))
			# Input line parsed
	# repulsives file parsed
	return (ereps,paramap)




# Functions to parse and check target function options
T_OPTPARSERS={
	"products":optImageList,
	"educts":optImageList,
}


def read_targets(targetsFileName="targets",verbosity=comatsci.constants.VBL_QUIET):
	"""read target definitions from target file
	@param targetsFileName: default="repulsives" filename to read targets definitions from
	@param verbosity: default=comatsci.constants.VBL_QUIET verbosity level"""
	#initialize target paths list
	targetPaths=[]
	#we also need identical copies for our objective calculations
	objectivePaths=[]
	
	#initialize targets list
	#a target in this list is a sequence of path reference, 
	#function reference, objective index, target weight, and a tuple of parameters
	targets=[]
	
	# read config file lines into memory
	targetsConfig=open(targetsFileName)
	trgLines=list(targetsConfig)
	targetsConfig.close()
	
	# now parse each line (do not iterate over lines 
	# we need primitive stateful parsing here: keep track of the 
	# current target path, set an invalid target for initialization
	currentTargetPath=-1
	# also track if we have read a target definition or 
	# a target path in the last line
	lastPath=False
	hasPath=False
	# to have correct line-number to report to the 
	# user, in case of an error
	for i in range(len(trgLines)):
		# skip comment lines
		if len(trgLines[i].strip())==0 or trgLines[i].strip()[0]=="#":
			continue
		else:
			# split line into tokens
			tokens=trgLines[i].strip().split()
			#We either expect a target path filename or 
			#a target definition referring to the last target path
			#just one token means, we have just a path filename (hopefully)
			if len(tokens)==1:
				targetFileName=tokens[0]
				#check if target file exitsts
				if not os.path.exists(targetFileName):
					raise "Invalid target path specification in line %d of targets: target path file '%s' not found." % (i+1,targetFileName)
				else:
					#sanity check: did we read a target path in the last line?
					if lastPath:
						if verbosity >= comatsci.constants.VBL_QUIET:
							print " *** WARNING *** No target functions defined for last target path!"
					#initialize new path Objects in mode "external scheduler"
					tempPath=comatsci.AnalysisPath.AnalysisPath("d")
					tempObjectivePath=comatsci.AnalysisPath.AnalysisPath("d")
					#read target path file
					tempPath.readfmgpath(targetFileName,checkCompat=False)
					tempObjectivePath.readfmgpath(targetFileName,checkCompat=False)
					#warn if no energies or forces in target path
					if not tempPath.has_energies:
						print " *** WARNING *** Path %s in line %d has no energies!"%(targetFileName,i+1)
					if not tempPath.has_realforces:
						print " *** WARNING *** Path %s in line %d has no real forces!"%(targetFileName,i+1)
					#append path and store new state
					targetPaths.append(tempPath)
					objectivePaths.append(tempObjectivePath)
					currentTargetPath=len(targetPaths)-1
					lastPath=True
					hasPath=True
			#for a target function def, we need at least function, objective ref. and weight
			elif (len(tokens)>2):
				if not hasPath:
					raise "Invalid target function definition in line %d of targets: target function declared without prior path definition" %(i+1)
				else:
					lastPath=False
				functionName=tokens[0].strip().lower()
				if not TARGETFUNCTIONS.has_key(functionName):
					raise "Invalid target function definition in line %d of targets: unknown function definition." %(i+1)
				else:
					#convert objective index and weight
					objIndex=int(tokens[1])
					objWeight=float(tokens[2])
					#parse options and check
					tempOptions={}
					#cycle through option tokens list
					for option in tokens[3:]:
						#split option name and arguments
						optTokens=option.split("=")
						optName=optTokens[0].lower()
						optArgs=optTokens[1]
						#check if option is allowed and parse its arguments
						print optTokens
						print optArgs
						
						if optName in T_VALIDOPTIONS[functionName]:
							tempOptions[optName]=T_OPTPARSERS[optName](arg=optArgs,path=targetPaths[currentTargetPath],lineNumber=i+1)
						else:
							raise "Invalid target function definition in line %d of targets: unexpected option %s for target function %s." % (i+1,functionName,optTokens[0])
					#finally, check if all required options were specified, if required options are present
					if T_REQUIREDOPTIONS[functionName]:
						for option in T_REQUIREDOPTIONS[functionName]:
							if not option in tempOptions:
								raise "Invalid target function definition in line %d of targets: option %s for target function %s is missing." % (i+1,functionName,option)
					#append the target function definition
					targets.append((currentTargetPath,TARGETFUNCTIONS[functionName][0],objIndex,objWeight,tempOptions))
			#catch malformed lines
			else:
				raise "Invalid target function definition in line %d of targets: need at least function, objective reference and objective weight." %(i+1)
	#finished parsing, return paths and targets
	return (targetPaths,objectivePaths,targets)
	


def calc_Objectives(targetPaths, objectivePaths, targets, objectiveCount,sched):
	"""calculate objective function values
	@param targetPaths: the fitting target paths storing target energies and gradients
	@param objectivePaths: the objective paths that will be calculated
	@param targets: the target functions to be combined into the objectives
	@param objectiveCount: the number of elements that the returned objectives list should have
	@param sched: scheduler object to carry out energies and forces calculations
	@return: list of objective function values"""
	# initialize objective function values
	objectiveValues=[]
	for i in range(objectiveCount):
		objectiveValues.append(0.0)
	# do E_rep calculations on objectivePaths
	for i in objectivePaths:
		# dirty: reset energies to force calculation of all images :-/
		i.energies=[]
		i.realforcesfunc(sched)
	# now iterate through targets, adding up the objective function values
	for (pathIndex, targetFunction, objIndex, objWeight,options) in targets:
		tempObjective=targetFunction(objectivePaths[pathIndex],targetpath=targetPaths[pathIndex],opt=options)
		objectiveValues[objIndex]+=objWeight*tempObjective
	return objectiveValues
	

#
# 
#

#
# MAIN LOOP
#
if __name__ == '__main__':
	
	from optparse import OptionParser
	
	# *** Parse Options ***

	usage="""usage: %prog [options] [<repulsives>] [<targets>] [<ranges>]
repulsives:\toptional filename of repulsives definition file, default = "repulsives"
targets:\t\toptional filename of targets definition file, default = "targets"
type '%prog --help' for more information"""
	
	parser=OptionParser(usage)
	
	parser.add_option("-m","--maxit",
			action="store", metavar="N", dest="maxit", type="int", default=1000,
			help="Maximum number of iterations, default = %default")
	
##	parser.add_option("-c","--craziness",
##			action="store", metavar="C", dest="craziness", type="int", default=10,
##			help="Crazyness factor, default = %default")
##
	
	# internally we still call this craziness, as it replaces the old craziness parameter
	parser.add_option("-u","--mutation",
			action="store", metavar="M", dest="craziness", type="float", default=0.1,
			help="Mutation factor, must be 0.0<M<1.0, default = %default")

	parser.add_option("-r","--repository-size",
			action="store", metavar="R", dest="repsize", type="int", default=100,
			help="Maximum number of Parameter sets to store in the repository, default = %default")

	parser.add_option("-p","--population",
			action="store", metavar="N", dest="population", type="int", default=100,
			help="Total number of E_rep sets to use, default = %default")

	parser.add_option("-v", 
			action="count", dest="verbosity", default=comatsci.constants.VBL_NORMAL,
			help="Increase verbosity level, default=%default")
	
	parser.add_option("-q", "--quiet",
			action="store_const", const=comatsci.constants.VBL_QUIET, dest="verbosity",
			help="Limit output to fatal errors and critical warnings, no status output at all")
			
	parser.add_option("--silence",
			action="store_const", const=comatsci.constants.VBL_SILENCE, dest="verbosity",
			help="Limit output to fatal errors only. Not even warnings.")			
	
	parser.add_option("--optdebug",
			action="store_true", default=False,  dest="optdebug",
			help="Optimization debug: write various files recording the optimization history. !OUTPUT FILES ARE LARGE! default=%default.")

	parser.add_option("-g","--ranges",
			action="store", default=None,  dest="ranges", type="string", metavar = "R",
			help="Read parameter range definitions from file R. default: use automatic +-40% of inital ranges.")

##	parser.add_option("-d","--scheduler",
##			action="store", type="string", dest="scheduler", default="s",
##			help="Choose scheduler to manage execution of single calculations. Choices are 's': serial, 'p': MPI parallel, 't': threading parallel. default=%default")
##
##	parser.add_option("-t","--maxworkthreads",
##			action="store", type="int", dest="maxthreads", default=0,
##			help="Set maximum number of concurrent parallel threads in thread scheduling mode. 0:= no limit. default=%default")
	
	(options,args) = parser.parse_args()
	
	# catch unexpected positional arguments:
	if len(args)>2:
		raise "Unexpected arguments in command line: %s" % str(args[2:])
	
	# set targets and frepulsives filenames from arguments if given, else default
	if len(args)<2:
		targetsFileName="targets"
	else:
		targetsFileName=args[1]
	if len(args)<1:
		repulsivesFileName="repulsives"
	else:
		repulsivesFileName=args[0]
	
	# *** read input files ***
	
	if options.verbosity>=comatsci.constants.VBL_NORMAL:
		print "reading repulsives definitions from %s" % repulsivesFileName
	
	ereps, paramap = read_repulsives(repulsivesFileName,options.verbosity)
	
	#paramap is a list of tuples containing: 
	#Element_1, Element_2, index
	if options.verbosity>=comatsci.constants.VBL_NORMAL:
		print "Parameters :\nE_rep\tr\t\tE(r)"
		for (El1, El2, i) in paramap:
			print "%d-%d:\t%f\t%f"%(El1,El2,ereps[(El1,El2)][0][i],ereps[(El1,El2)][1][i])
	
	if options.verbosity>=comatsci.constants.VBL_NORMAL:
		print "reading repulsives definitions from %s" % targetsFileName
	targetPaths, objectivePaths, targets = read_targets(targetsFileName,options.verbosity)
	
	#TODO: Add targets listing here
	
##	if options.verbosity>=comatsci.constants.VBL_NORMAL:
##		print "target definitions:"
##		for i in targetPaths:
##			
	
	# ************************************************************************************
	# Optimization debug: write target paths to plotable files
	if options.optdebug:
		for od_i in range(len(targetPaths)):
			od_frcfile=open("target-%03d.frc"%od_i,"w")
			od_nrgfile=open("target-%03d.nrg"%od_i,"w")
			for od_j in range(targetPaths[od_i].numimages()):
				print >> od_nrgfile, targetPaths[od_i].energies[od_j]
				frcflat=num.array(targetPaths[od_i].realforces[od_j]).ravel()
				for od_k in frcflat:
					print >> od_frcfile, "%20.12e" %(od_k,)
				print >> od_frcfile, "\n" # double newline to separate gnuplot data blocks
			od_frcfile.close()
			od_nrgfile.close()
	# ************************************************************************************

	# *** initialize calculator and scheduler ***
	calc=comatsci.Calculators.erepcalc(ereps)
	sched=comatsci.Schedulers.serialScheduler(calc)
	
	# *** initialize MOPSO ***
	
	# population size
##	popsize=100
	# archive size
##	archsize=100
	# number of generations
##	generations=1000
	# number of parameters
	paramcount=len(paramap)
	# number of objectives
	objcount=3
##	# craziness factor
####	craziness=10
##	# start MOPSO process

	
	#check, whether the mutation factor is in range:
	if options.craziness <0.0 or options.craziness > 1.0:
		raise "specified mutation factor %f out of range." % (options.craziness)
	
	if options.verbosity>=comatsci.constants.VBL_NORMAL:
		print " starting mopso wrapper script"
	
	if not os.path.exists("./mopsowrap.sh"):
		raise "mopso wrapper script ./mopsowrap.sh not found, abort!"
	
	mopso=popen2.Popen3("./mopsowrap.sh",0)
	
	if options.verbosity>=comatsci.constants.VBL_NORMAL:
		print "mopso started"
	
	# send global mopso options
	print >> mopso.tochild, "%d %d %d %d %d %d 42" % (
		options.population,
		options.repsize,
		options.maxit, 
		paramcount, 
		objcount, 
		options.craziness)
	mopso.tochild.flush()
	if options.verbosity>=comatsci.constants.VBL_TALKY:
		print "MOPSO init parameters: %d %d %d %d %d %d 42" % (
			options.population,
			options.repsize,
			options.maxit, 
			paramcount, 
			objcount, 
			options.craziness)
	#=======================================================================================
	# determine parameter ranges:
	# read user defined ranges, if specified
	if options.ranges!=None:
		if not os.path.exists(options.ranges):
			print "Error, specified parameter ranges file '%s' does not exist. Abort."
			sys.exit(1)
		else:
			rangedict=read_ranges(options.ranges)
	# no ranges file is specified, initialize dictionary to be empty
	else:
		rangedict={}
	#=======================================================================================	
	# send parameter definitions
##	for (El1, El2, i) in paramap:
##		print >> mopso.tochild, "%d-%d: %3d %f %f"%(El1,El2,i,0.6*ereps[(El1,El2)][1][i],
##			1.4*ereps[(El1,El2)][1][i])
##		if options.verbosity>=comatsci.constants.VBL_TALKY:
##			print "%d-%d: %3d %f %f"%(El1,El2,i,0.6*ereps[(El1,El2)][1][i],
##				1.4*ereps[(El1,El2)][1][i])
	for i in range(len(paramap)):
		(El1,El2,idx)=paramap[i]
		if rangedict.has_key(i):
			(lo,hi)=rangedict[i]
		else:
			lo=0.6*ereps[(El1,El2)][1][idx]
			hi=1.4*ereps[(El1,El2)][1][idx]
		line="%d-%d: %3d %f %f"%(El1,El2,idx,lo,hi)
		print >> mopso.tochild, line
		if options.verbosity>=comatsci.constants.VBL_TALKY:
			print line
	mopso.tochild.flush()
	# ************************************************************************************
	# Optimization debug: write repulsive potentials histories to outputfiles
	# initialize output files
	if options.optdebug:
		od_repfiles=[]
		for i in ereps.keys():
			od_repfiles.append(open("repdbg_%d-%d"%i,"w")) # key of ereps is a 2-tuple of ints
	# ************************************************************************************
	#LOOP MOPSO
	mopsoLoop=True
	while mopsoLoop:
		# wait for parameters from MOPSO
		wait=True
		while wait:
			line=mopso.fromchild.readline().strip()
			if options.verbosity>=comatsci.constants.VBL_DEBUG2:
				print "from mopso: "+line
			if line[0:5]=='PARAM':
				if options.verbosity>=comatsci.constants.VBL_DEBUG1:
					print "PARAM"
				wait=False
			elif line[0:8]=="FINISHED":
				wait=False
				mopsoLoop=False
				if options.verbosity>=comatsci.constants.VBL_NORMAL:
					print "FINISHED"
				continue
			else:
				#kill mopso
				os.kill(mopso.pid,signal.SIGKILL)
				raise "Unexpected message from MOPSO received: %s" % line
		if not mopsoLoop:
			continue #skip the rest of the loop to avoid waiting for a defunct mopso
		# read parameters from MOPSO
		params=[]
		while len(params)<paramcount:
			dummy=mopso.fromchild.readline()
			for i in dummy.split():
				params.append(float(i))
		# make a copy of ereps for this calculation
		tempEreps=copy.deepcopy(ereps)
##		print tempEreps.keys()
		# map MOPSO parameters into temporary E_reps
		for i in range(paramcount):
			(e1, e2, index) = paramap[i]
			tempEreps[(e1,e2)][1][index]=params[i]
		# ************************************************************************************
		# Optimization debug: Write mapped repulsive potentials to debug files
		#
		if options.optdebug:
			for od_i in range(len(tempEreps.keys())):
				repkey=tempEreps.keys()[od_i]
				for od_j in range(len(tempEreps[repkey][0])):
					print >> od_repfiles[od_i], "%20.12e\t%20.12e" % (tempEreps[repkey][0][od_j],tempEreps[repkey][1][od_j])
				print >> od_repfiles[od_i], "\n" # two newlines to separate blocks for gnuplot
		# ************************************************************************************
		# set repulsive Potentials and calculate objective values
		calc._setEreps(tempEreps)
		objectiveValues=calc_Objectives(targetPaths, objectivePaths, targets, objcount,sched)
		if options.verbosity>=comatsci.constants.VBL_DEBUG1:
			print "calculated objectives"+str(objectiveValues)
		# wait for MOPSO to ask for objectives
		wait=True
		while wait and mopsoLoop:
			if mopso.poll()==-1:
				line=mopso.fromchild.readline().strip()
			else:
				wait=False
				mopsoLoop=False
				line="mopso process has exited unexpectedly"
				print mopso.poll()
			if options.verbosity>=comatsci.constants.VBL_DEBUG2:
				print "from mopso: "+line
			if line[0:3]=='OBJ':
				wait=False
				if options.verbosity>=comatsci.constants.VBL_DEBUG1:
					print "OBJ"
				# pass objective values to MOPSO
				for i in objectiveValues:
					print >> mopso.tochild, "%20.12e" % (i)
				mopso.tochild.flush()
			elif line[0:8]=="FINISHED":
				wait=False
				mopsoLoop=False
				if options.verbosity>=comatsci.constants.VBL_NORMAL:
					print "FINISHED"
				continue #skip the rest of the loop to avoid waiting for a defunct mopso
	
	# ************************************************************************************
	# Optimization debug: close repulsive potantial trajectory files
	#
	if options.optdebug:
		for od_i in od_repfiles:
			od_i.close()
	# ************************************************************************************

	if options.verbosity>=comatsci.constants.VBL_NORMAL:
		print "stopping mopso..."
	#FINALIZE MOPSO
	os.kill(mopso.pid,signal.SIGKILL)
	if options.verbosity>=comatsci.constants.VBL_NORMAL:
		print "done."
