#!/usr/bin/python
##############################################################################
# multiavergae
# Part of PAth Search Tool bAsed on Flexible Atomistic Reaction Image ANalysis
# (c) 2005-2008 by Jan M. Knaup <Knaup@bccms.uni-bremen.de>
# all rights reserved
##############################################################################
# Licensed under the Non-Profit Open Software License version 3.0
# see file LICENSE for details.
##############################################################################

import os,sys

import numpy.oldnumeric as num

from optparse import OptionParser


def readDataFile(filename,ignorecolumns=0):
	"""read ascii data file and return data as 2D numeric python array
	@param filename: The name of the ascii data file to be read
	@param ignorecolumns: optional number of leading data columns to be ignored (default 0)
	@return: Numerical 2D-array of Floats containing the data fom "filename"
	"""
	# read whole file and store as list of raw input lines
	infile=open(filename,'r')
	inlines=list(infile)
	infile.close()
	# now iterate through lines, ignoring comment lines, checking everything carefulle
	# try to be userproof
	inDataMatrix=[]
	expectedElements=-1
	#-------------------------------------------------------
	# BEGIN line parsing loop
	#-------------------------------------------------------
	for i in range(len(inlines)):
		# check for empty or comment lines
		currentLine=inlines[i].strip()
		if len(currentLine)==0:
			continue
		if currentLine[0]=='#' or currentLine[0]==';':
			continue
		# now parse the data elements read in the current line
		# split the input line and ignore the specified number of leading columns
		rawElements=currentLine.split()[ignorecolumns:]
		floatElements=[]
		# if a number of expected elements is stored (aka 
		# subsequent lines), check if the current line has the 
		# expected element count
		if expectedElements!=-1:
			if len(rawElements)!=expectedElements:
				raise """Input line %d:\n"%s"\ndoes not have expected number of columns. Expecting %d, found %d. abort.""" %(i+1,currentLine,expectedElements,len(rawElements))
		# if this is the first line, store expected element count
		else:
			expectedElements=len(rawElements)
		# use expected element count to save function call within loop
		# this is safe, because we checked above that the element
		# counts matched
		#-------------------------------------------------------
		# BEGIN intra-line number parsing loop
		#-------------------------------------------------------
		for j in range(expectedElements):
			# if float conversion fails, give the user a detailed error message
			try:
				thisElement=float(rawElements[j])
			except:
				print """Element "%s" from input line %d cannot be converted to float. abort.""" % (rawElements[j],i)
				raise
			floatElements.append(thisElement)
		#-------------------------------------------------------
		# END intra-line number parsing loop
		#-------------------------------------------------------
		inDataMatrix.append(floatElements)
	#-------------------------------------------------------
	# END line parsing loop	
	#-------------------------------------------------------
	# convert raw data list to numarray and return
	return num.array(inDataMatrix,num.Float)

	
	

def ensembleAverage(ensemble):
	"""average over arrays
	@param ensemble: iterable of array of the same shape to average over
	@return: array of ensemble averages of all elements
	"""
	# create a new array in memory to store the ensemble average values
	average=num.zeros(num.shape(ensemble[0]),num.Float)
	# sum all single ensemble element
	for i in ensemble:
		average+=i
	# divide by number of ensemble elements and return the result
	return average/float(len(ensemble))

	
	
	
def runningAverage(rawData,length):
	"""calulate running averages of 2D arrays of floats, average along columns
	@param rawData: the 2D data array from which to calculate averages
	@param length: window size in lines over which to average
	@return: 2D array of running averages. Has length fewer lines than rawData
	"""
	# just to make sure
	length=int(length)
	# prepare temporary array of running averages
	rawShape=num.shape(rawData)
	averages=num.zeros((rawShape[0]-length,rawShape[1]),num.Float)
	# acumulate over windows
	for i in range(rawShape[0]-length):
		averages[i]=num.add.reduce(rawData[i:i+length])
	# divide by window size and return
	return averages/float(length)


	

#-------------------------------------------------------
# MAIN PROGRAM
#-------------------------------------------------------
if __name__=="__main__":
	
	# construct and populate an option parser
	
	usage = """%prog [options] datafile [[datafile], ...]
Calculate averages of Data in ascii files of same column and line counts.
If more than one datafile is specified, first calculate ensemble average over files.
Other averages available via options.\nLicensed under the Non-Profit Open Software License version 3.0"""

	parser=OptionParser(usage)

	parser.add_option("-r","--running-average",
			action="store", type="int", metavar="N", dest="running", default=None,
			help="Calculate running average of window size N over lines of input data. default: no running average.")
	parser.add_option("-i","--ignore columns",
			action="store", type="int", metavar="N", dest="ignoreColumns", default=0,
			help="Ignore N leading columns of input data. default: ignore no input columns.")
	
	# parse command line and check arguments
	(options,args)=parser.parse_args()
	
	if len(args)<1:
		print "Need at least one input data file! Abort."
		sys.exit(1)
	
	# read input files to populate inital ensemble
	ensemble=[]
	
	for i in args:
		if os.path.exists(i):
			ensemble.append(readDataFile(i,options.ignoreColumns))
		else:
			"""Input file "%s" does not exist. Abort.""" % i
			sys.exit(1)
	
	# if initial ensemble has more than one file, calculate ensemble average
	if len(ensemble)>1:
		inData=ensembleAverage(ensemble)
	else:
		inData=ensemble[0]
	
	# check for running average or other options operations and apply them to the ensemble average
	
	outData=None
	
	if options.running!=None:
		outData=runningAverage(inData,options.running)
	
	# if no operation was performed, use the ensemble average for output
	if outData==None:
		outData=inData
	
	# print output data to stdout
	for i in outData:
		for j in i:
			print "%f" %j,
		print ""

	# done!
